# encoding: utf-8
# 2019 R2
SetScriptVersion(Version="19.4.159")
system1 = GetSystem(Name="FFF")
setupComponent1 = system1.GetComponent(Name="Setup")
setupComponent1.Refresh()
setup1 = system1.GetContainer(ComponentName="Setup")
fluentLauncherSettings1 = setup1.GetFluentLauncherSettings()
fluentLauncherSettings1.SetEntityProperties(Properties=Set(DisplayText="Fluent Launcher Settings", Precision="Double", EnvPath={}))
setup1.Edit()
setup1.SendCommand(Command="(cx-use-window-id 1)")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "General*Table1*ButtonBox1(Mesh)*PushButton2(Display)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Display*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "General*Table1*Table2(Solver)*ToggleBox5(Time)*Transient" #t)(cx-gui-do cx-activate-item "General*Table1*Table2(Solver)*ToggleBox5(Time)*Transient")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Ruler Visibility*ruler")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models|Viscous (Laminar)"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models|Viscous (Laminar)"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models|Viscous (Laminar)"))(cx-gui-do cx-set-toggle-button2 "Viscous Model*Table1*ToggleBox1(Model)*Spalart-Allmaras (1 eqn)" #t)(cx-gui-do cx-activate-item "Viscous Model*Table1*ToggleBox1(Model)*Spalart-Allmaras (1 eqn)")(cx-gui-do cx-set-toggle-button2 "Viscous Model*Table1*ToggleBox5(Spalart-Allmaras Production)*Strain/Vorticity-Based" #t)(cx-gui-do cx-activate-item "Viscous Model*Table1*ToggleBox5(Spalart-Allmaras Production)*Strain/Vorticity-Based")(cx-gui-do cx-activate-item "Viscous Model*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Models|Viscous (Spalart-Allmaras (1 eqn))"))(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|inlet (velocity-inlet, id=8)"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Boundary Conditions|inlet (velocity-inlet, id=8)"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Setup|Boundary Conditions|inlet (velocity-inlet, id=8)\"))(cx-gui-do cx-set-list-selections \"Velocity Inlet*Frame3*Frame1(Momentum)*Table1*DropDownList6(Velocity Specification Method)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*Frame3*Frame1(Momentum)*Table1*DropDownList6(Velocity Specification Method)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame3*Frame1(Momentum)*Table1*Table16*ExpressionEntry1(X-Velocity)\" '(\"3\" . 0))(cx-gui-do cx-activate-item \"Velocity Inlet*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Mesh Interfaces"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Mesh Interfaces"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Mesh Interfaces"))')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Interfaces*Table1*Table2(Unassigned Interface Zones)*Table2*Table2*PushButton2( Manual Create)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Create/Edit Mesh Interfaces *Table1*List2\" '( 0))(cx-gui-do cx-activate-item \"Create/Edit Mesh Interfaces *Table1*List2\")(cx-gui-do cx-set-list-selections \"Create/Edit Mesh Interfaces *Table1*List3\" '( 1))(cx-gui-do cx-activate-item \"Create/Edit Mesh Interfaces *Table1*List3\")(cx-gui-do cx-set-text-entry \"Create/Edit Mesh Interfaces *Table1*TextEntry4(Mesh Interface)\" \"i1\")(cx-gui-do cx-activate-item \"Create/Edit Mesh Interfaces *PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Create/Edit Mesh Interfaces *PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Interfaces*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Dynamic Mesh"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Dynamic Mesh"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Dynamic Mesh*Table1*Table1*CheckButton1(Dynamic Mesh)" #t)(cx-gui-do cx-activate-item "Dynamic Mesh*Table1*Table1*CheckButton1(Dynamic Mesh)")(cx-gui-do cx-set-toggle-button2 "Dynamic Mesh*Table1*Table1*Table2*Table3*Table1(Mesh Methods)*CheckButton3(Remeshing)" #t)(cx-gui-do cx-activate-item "Dynamic Mesh*Table1*Table1*Table2*Table3*Table1(Mesh Methods)*CheckButton3(Remeshing)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh*Table1*Table1*Table2*Table3*Table1(Mesh Methods)*PushButton5(Settings)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Mesh Method Settings*Frame1*Frame3(Remeshing)*Table1*Table1*Table2(Sizing Options)*CheckButton1(Sizing Function)" #t)(cx-gui-do cx-activate-item "Mesh Method Settings*Frame1*Frame3(Remeshing)*Table1*Table1*Table2(Sizing Options)*CheckButton1(Sizing Function)")(cx-gui-do cx-set-integer-entry "Mesh Method Settings*Frame1*Frame3(Remeshing)*Table1*Table1*Table2(Sizing Options)*IntegerEntry2(Resolution)" 2)(cx-gui-do cx-activate-item "Mesh Method Settings*Frame1*Frame3(Remeshing)*Table1*Table1*Table2(Sizing Options)*IntegerEntry2(Resolution)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Mesh Method Settings*Frame1*Frame3(Remeshing)*Table1*Table1*Table2(Sizing Options)*IntegerEntry2(Resolution)" 1)(cx-gui-do cx-activate-item "Mesh Method Settings*Frame1*Frame3(Remeshing)*Table1*Table1*Table2(Sizing Options)*IntegerEntry2(Resolution)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Mesh Method Settings*Frame1*Frame3(Remeshing)*Table1*Table1*Table2(Sizing Options)*RealEntry3(Variation)\" '( 0.3))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Method Settings*Frame1*Frame3(Remeshing)*Table1*Table3(Parameters)*Frame6*PushButton1(Default)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Method Settings*Frame1*Frame3(Remeshing)*Table1*Table3(Parameters)*Frame6*PushButton2(Mesh Scale Info)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Scale Info*PanelButtons*PushButton1(Close)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Method Settings*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame4(User-Defined)*Table1*Table3(User Defined)*PushButton1(Functions)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenuFunctions*Compiled...")')
setup1.SendCommand(Command="(cx-gui-do cx-activate-item \"Compiled UDFs*Table1*Frame1*Frame2*PushButton1( Add)\")(cx-gui-do cx-set-file-dialog-entries \"Select File\" '( \"C:/Users/ngov/Desktop/RigidFoilSimulation/modRigidPlateFile.c\") \"Source Files (*.c *.cpp )\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Compiled UDFs*Frame8*PushButton2(Build)")(cx-gui-do cx-activate-item "Question*OK")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Compiled UDFs*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh*Table1*Table1*Table2*Table5*PushButton1(Create/Edit)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Dynamic Mesh Zones*Frame1*Table1*DropDownList1(Zone Names)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh Zones*Frame1*Table1*DropDownList1(Zone Names)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Dynamic Mesh Zones*Frame3*Frame1(Motion Attributes)*Table1*DropDownList1(Motion UDF/Profile)\" '( 2))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh Zones*Frame3*Frame1(Motion Attributes)*Table1*DropDownList1(Motion UDF/Profile)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh Zones*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Dynamic Mesh Zones*Frame1*Table1*DropDownList1(Zone Names)\" '( 10))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh Zones*Frame1*Table1*DropDownList1(Zone Names)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Dynamic Mesh Zones*Frame3*Frame1(Motion Attributes)*Table1*DropDownList1(Motion UDF/Profile)\" '( 0))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh Zones*Frame3*Frame1(Motion Attributes)*Table1*DropDownList1(Motion UDF/Profile)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh Zones*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Dynamic Mesh Zones*Frame1*Table1*DropDownList1(Zone Names)\" '( 7))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh Zones*Frame1*Table1*DropDownList1(Zone Names)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Dynamic Mesh Zones*Frame3*Frame1(Motion Attributes)*Table1*DropDownList1(Motion UDF/Profile)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh Zones*Frame3*Frame1(Motion Attributes)*Table1*DropDownList1(Motion UDF/Profile)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh Zones*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Dynamic Mesh Zones*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Reference Values"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Setup|Reference Values"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Setup|Reference Values\"))(cx-gui-do cx-set-list-selections \"Reference Values*DropDownList1(Compute from)\" '( 8))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Reference Values*DropDownList1(Compute from)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Reference Values*Table2(Reference Values)*RealEntry1(Area)\" '( 0.15))(cx-gui-do cx-activate-item \"Reference Values*Table2(Reference Values)*RealEntry1(Area)\")")
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Reference Values*Table2(Reference Values)*RealEntry5(Length)\" '( 0.15))(cx-gui-do cx-activate-item \"Reference Values*Table2(Reference Values)*RealEntry5(Length)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Methods"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Methods"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Solution|Methods\"))(cx-gui-do cx-set-list-selections \"Solution Methods*Table1*Table2(Pressure-Velocity Coupling)*DropDownList2(Scheme)\" '( 2))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Methods*Table1*Table2(Pressure-Velocity Coupling)*DropDownList2(Scheme)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Solution Methods*Table1*Table3(Spatial Discretization)*DropDownList1(Gradient)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Methods*Table1*Table3(Spatial Discretization)*DropDownList1(Gradient)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Residual"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Residual"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Solution|Monitors|Residual\"))(cx-gui-do cx-set-real-entry-list \"Residual Monitors*Table1*Table2*Table1*Table1(Equations)*RealEntry11\" '( 1e-05))(cx-gui-do cx-set-real-entry-list \"Residual Monitors*Table1*Table2*Table1*Table1(Equations)*RealEntry17\" '( 1e-05))(cx-gui-do cx-set-real-entry-list \"Residual Monitors*Table1*Table2*Table1*Table1(Equations)*RealEntry23\" '( 1e-05))(cx-gui-do cx-set-real-entry-list \"Residual Monitors*Table1*Table2*Table1*Table1(Equations)*RealEntry29\" '( 1e-05))(cx-gui-do cx-activate-item \"Residual Monitors*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Report Definitions"))(cx-gui-do cx-list-tree-right-click "NavigationPane*List_Tree1" )')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*Force ReportSubMenu*Lift...")')
setup1.SendCommand(Command='(cx-gui-do cx-set-text-entry "Lift Report Definition*Table1*TextEntry3(Name)" "lift-coeff")(cx-gui-do cx-activate-item "Lift Report Definition*Table1*TextEntry3(Name)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Lift Report Definition*Table1*Table2*List2(Wall Zones)\" '( 0))(cx-gui-do cx-activate-item \"Lift Report Definition*Table1*Table2*List2(Wall Zones)\")(cx-gui-do cx-set-toggle-button2 \"Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\" #t)(cx-gui-do cx-activate-item \"Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton1(Report File)\")(cx-gui-do cx-set-toggle-button2 \"Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\" #t)(cx-gui-do cx-activate-item \"Lift Report Definition*Table1*Table1*Table5(Create)*CheckButton2(Report Plot)\")(cx-gui-do cx-activate-item \"Lift Report Definition*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Files|lift-coeff-rfile"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Monitors|Report Files|lift-coeff-rfile"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Solution|Monitors|Report Files|lift-coeff-rfile\"))(cx-gui-do cx-set-text-entry \"Edit Report File*Table1*Table6(File Name)*TextEntry1\" \".\\\\lift-data.out\")(cx-gui-do cx-set-list-selections \"Edit Report File*Table1*List2(Available Report Definitions)\" '( 1))(cx-gui-do cx-activate-item \"Edit Report File*Table1*List2(Available Report Definitions)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Edit Report File*Table1*Table4*PushButton1( Add>>)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Edit Report File*Table1*List3(Selected Report Definitions)\" '( 1))(cx-gui-do cx-activate-item \"Edit Report File*Table1*List3(Selected Report Definitions)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Edit Report File*Table1*Table4*PushButton2( <<Remove)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Edit Report File*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Initialization"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Initialization"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*List_Tree1\" (list \"Solution|Initialization\"))(cx-gui-do cx-set-list-selections \"Solution Initialization*Table1*DropDownList1(Compute from)\" '( 0))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Initialization*Table1*DropDownList1(Compute from)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-real-entry-list \"Solution Initialization*Table1*Table6(Initial Values)*RealEntry2(X Velocity)\" '( 3))(cx-gui-do cx-activate-item \"Solution Initialization*Table1*Table6(Initial Values)*RealEntry2(X Velocity)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Solution Initialization*Table1*Frame8*PushButton1(Initialize)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Calculation Activities"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Calculation Activities"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Calculation Activities"))(cx-gui-do cx-set-integer-entry "Calculation Activities*Table1*IntegerEntry1(Autosave Every (Iterations))" 100)(cx-gui-do cx-activate-item "Calculation Activities*Table1*IntegerEntry1(Autosave Every (Iterations))")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Calculation Activities*ButtonBox4*PushButton1(Create)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "MenuBar*PopupMenuAutomaticExport*Solution Data Export...")')
setup1.SendCommand(Command="(cx-gui-do cx-set-text-entry \"Automatic Export*Table1*TextEntry1(Name)\" \"wallshear-data\")(cx-gui-do cx-set-text-entry \"Automatic Export*Table1*Table7*Table1*TextEntry1(File Name)\" \"GEO-wallshear-k0p08\")(cx-gui-do cx-set-list-selections \"Automatic Export*Table1*Table2*DropDownList1(File Type)\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Automatic Export*Table1*Table2*DropDownList1(File Type)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Automatic Export*Table1*List4(Surfaces)\" '( 1))(cx-gui-do cx-activate-item \"Automatic Export*Table1*List4(Surfaces)\")(cx-gui-do cx-set-list-selections \"Automatic Export*Table1*Table5*List1(Quantities)\" '( 32))(cx-gui-do cx-activate-item \"Automatic Export*Table1*Table5*List1(Quantities)\")(cx-gui-do cx-set-list-selections \"Automatic Export*Table1*Table5*List1(Quantities)\" '( 32 33))(cx-gui-do cx-activate-item \"Automatic Export*Table1*Table5*List1(Quantities)\")(cx-gui-do cx-set-list-selections \"Automatic Export*Table1*Table5*List1(Quantities)\" '( 31 32 33))(cx-gui-do cx-activate-item \"Automatic Export*Table1*Table5*List1(Quantities)\")(cx-gui-do cx-activate-item \"Automatic Export*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Calculation Activities*PushButton7(Create/Edit)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Execute Commands*IntegerEntry1(Defined Commands)" 1)(cx-gui-do cx-activate-item "Execute Commands*IntegerEntry1(Defined Commands)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Execute Commands*IntegerEntry1(Defined Commands)" 2)(cx-gui-do cx-activate-item "Execute Commands*IntegerEntry1(Defined Commands)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Execute Commands*Table2*CheckButton6" #t)(cx-gui-do cx-activate-item "Execute Commands*Table2*CheckButton6")(cx-gui-do cx-set-toggle-button2 "Execute Commands*Table2*CheckButton12" #t)(cx-gui-do cx-activate-item "Execute Commands*Table2*CheckButton12")(cx-gui-do cx-set-text-entry "Execute Commands*Table2*TextEntry11" "pressure")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Execute Commands*PanelButtons*PushButton4(Define Macro)")(cx-gui-do cx-set-text-entry "Define Macro*TextEntry3(Name)" "pressure")(cx-gui-do cx-activate-item "Define Macro*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*Display Options Panel*fl_mesh_svg_graphics_toolbar")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Display*Table1*Frame3*List1(Surfaces)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '())(cx-gui-do cx-set-list-selections \"Mesh Display*Table1*Frame3*List1(Surfaces)\" '( 1))(cx-gui-do cx-activate-item \"Mesh Display*Table1*Frame3*List1(Surfaces)\")(cx-gui-do cx-activate-item \"Mesh Display*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "ToolBar*View Tools*autoscale")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Graphics|Contours"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Graphics|Contours"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Results|Graphics|Contours"))')
setup1.SendCommand(Command="(cx-gui-do cx-set-text-entry \"Contours*Table1*TextEntry2(Contour Name)\" \"pressure\")(cx-gui-do cx-set-toggle-button2 \"Contours*Table1*Frame1*Frame3*ToggleBox1(Coloring)*Banded\" #t)(cx-gui-do cx-activate-item \"Contours*Table1*Frame1*Frame3*ToggleBox1(Coloring)*Banded\")(cx-gui-do cx-set-toggle-button2 \"Contours*Table1*Frame1*ToggleBox1(Options)*CheckButton3(Contour Lines)\" #t)(cx-gui-do cx-activate-item \"Contours*Table1*Frame1*ToggleBox1(Options)*CheckButton3(Contour Lines)\")(cx-gui-do cx-set-toggle-button2 \"Contours*Table1*Frame1*ToggleBox1(Options)*CheckButton4(Global Range)\" #f)(cx-gui-do cx-activate-item \"Contours*Table1*Frame1*ToggleBox1(Options)*CheckButton4(Global Range)\")(cx-gui-do cx-set-toggle-button2 \"Contours*Table1*Frame1*ToggleBox1(Options)*CheckButton3(Contour Lines)\" #f)(cx-gui-do cx-activate-item \"Contours*Table1*Frame1*ToggleBox1(Options)*CheckButton3(Contour Lines)\")(cx-gui-do cx-set-toggle-button2 \"Contours*Table1*Frame1*ToggleBox1(Options)*CheckButton5(Auto Range)\" #f)(cx-gui-do cx-activate-item \"Contours*Table1*Frame1*ToggleBox1(Options)*CheckButton5(Auto Range)\")(cx-gui-do cx-set-toggle-button2 \"Contours*Table1*Frame1*ToggleBox1(Options)*CheckButton6(Clip to Range)\" #f)(cx-gui-do cx-activate-item \"Contours*Table1*Frame1*ToggleBox1(Options)*CheckButton6(Clip to Range)\")(cx-gui-do cx-set-real-entry-list \"Contours*Table1*Frame3*Frame2*Frame1*RealEntry1(Min)\" '( -22))(cx-gui-do cx-set-real-entry-list \"Contours*Table1*Frame3*Frame2*Frame1*RealEntry2(Max)\" '( 4))(cx-gui-do cx-activate-item \"Contours*PanelButtons*PushButton1(OK)\")")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Contours*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Mesh Display*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command="(cx-stop-macro)")
setup1.SendCommand(Command="(cx-gui-do cx-set-text-entry \"Execute Commands*Table2*TextEntry17\" \"/display save-picture \"Presure_%t.tiff\"\")(cx-gui-do cx-set-list-selections \"Execute Commands*Table2*DropDownList10\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Execute Commands*Table2*DropDownList10")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Execute Commands*Table2*DropDownList16\" '( 1))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Execute Commands*Table2*DropDownList16")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Execute Commands*Table2*IntegerEntry8" 2)(cx-gui-do cx-activate-item "Execute Commands*Table2*IntegerEntry8")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Execute Commands*Table2*IntegerEntry14" 2)(cx-gui-do cx-activate-item "Execute Commands*Table2*IntegerEntry14")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Execute Commands*PanelButtons*PushButton4(Define Macro)")(cx-gui-do cx-activate-item "Define Macro*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Execute Commands*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Run Calculation"))')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Run Calculation"))(cx-gui-do cx-activate-item "NavigationPane*List_Tree1")')
setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*List_Tree1" (list "Solution|Run Calculation"))')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame4(User-Defined)*Table1*Table3(Field Functions)*PushButton1(Custom)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Custom Field Function Calculator*Table1*Frame3(Select Operand Field Functions from)*Table1*DropDownList1(Field Functions)\" '( 10))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Custom Field Function Calculator*Table1*Frame3(Select Operand Field Functions from)*Table1*DropDownList1(Field Functions)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Custom Field Function Calculator*Table1*Frame3(Select Operand Field Functions from)*Table1*DropDownList2\" '( 2))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Custom Field Function Calculator*Table1*Frame3(Select Operand Field Functions from)*Table1*DropDownList2")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Custom Field Function Calculator*Table1*Frame3(Select Operand Field Functions from)*PushButton2(Select)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Custom Field Function Calculator*Table1*ButtonBox2*PushButton6(-)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-list-selections \"Custom Field Function Calculator*Table1*Frame3(Select Operand Field Functions from)*Table1*DropDownList2\" '( 3))")
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Custom Field Function Calculator*Table1*Frame3(Select Operand Field Functions from)*Table1*DropDownList2")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Custom Field Function Calculator*Table1*Frame3(Select Operand Field Functions from)*PushButton2(Select)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-text-entry "Custom Field Function Calculator*Table1*TextEntry4(New Function Name)" "vorticity")(cx-gui-do cx-activate-item "Custom Field Function Calculator*PanelButtons*PushButton1(OK)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Custom Field Function Calculator*PanelButtons*PushButton2(Cancel)")')
setup1.SendCommand(Command="(cx-gui-do cx-set-expression-entry \"Run Calculation*Table1*Table7*ExpressionEntry1(Time Step Size)\" '(\"0.000625\" . 0))(cx-gui-do cx-activate-item \"Run Calculation*Table1*Table7*ExpressionEntry1(Time Step Size)\")")
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Run Calculation*Table1*Table7*IntegerEntry2(Number of Time Steps)" 4)(cx-gui-do cx-activate-item "Run Calculation*Table1*Table7*IntegerEntry2(Number of Time Steps)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Run Calculation*Table1*IntegerEntry10(Number of Iterations)" 2000)(cx-gui-do cx-activate-item "Run Calculation*Table1*IntegerEntry10(Number of Iterations)")')
setup1.SendCommand(Command='(cx-gui-do cx-set-integer-entry "Run Calculation*Table1*IntegerEntry10(Number of Iterations)" 1999)(cx-gui-do cx-activate-item "Run Calculation*Table1*IntegerEntry10(Number of Iterations)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Run Calculation*Table1*PushButton22(Calculate)")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Error*OK")')
setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Information*OK")')
